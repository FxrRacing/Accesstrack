generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public", "storage"]
}

//public 
//public 

model UserProfiles {
    id        String   @id @db.Uuid
    username  String?  @unique
    fullName  String?  @map("full_name")
    email     String?
    phone     String?
    avatarUrl String?  @map("avatar_url")
    website   String?
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

    
    UserHistory UserHistory[]


  @@map("user_profiles")
  @@schema("public")

  // Relations to Software assignments and history:
  AssignedSoftware     Software[]             @relation("AuthUserToSoftware")   // Software for which this auth user is assigned as primary contact
  SoftwareNotes        Software[]             @relation("NotesLastUpdatedBy")    // Software for which this user updated the notes
  UserSoftware         UserSoftware[]         @relation("GrantedAccess")         // Grants for software assignments
  updatedSoftwares Software[] @relation("SoftwareUpdateRelation")
  // Join table relations for Shared Accounts assignments:
  SharedAccountSoftware SharedAccountSoftware[] // Records shared account assignments to software
  SharedAccountUser     SharedAccountUser[]     // Records shared account assignments to users
  updatedSharedAccounts     SharedAccount[]        @relation("SharedAccountUpdate")
 
  SharedAccountHistory SharedAccountHistory[]
  Invites Invites[]
}

model Invites{
  id String @id @default(uuid()) @db.Uuid
  fullName String
  email String @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  role String
  team String
  createdById String @db.Uuid
  createdBy UserProfiles @relation(fields: [createdById], references: [id], onDelete: Cascade)
  status String @default("FULFILLED")
  @@schema("public")
} 

model User {
  id            String          @id @default(uuid()) @db.Uuid
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(6)
  department    String          @default("unassigned")
  email         String          @unique
  name          String          @unique
  jobTitle      String?
  location      String?
  locationId    String?         @db.Uuid
  personalEmail String?         
  reportsToId   String?         @db.Uuid
  type          String?
  status        String          @default("ACTIVE")
  onboardingDate DateTime?      @db.Timestamptz(6)
  offboardingDate DateTime?      @db.Timestamptz(6)
  
  reportsTo     User?           @relation("ManagerSubordinates", fields: [reportsToId], references: [id], onDelete: Cascade)
  subordinates  User[]          @relation("ManagerSubordinates")
   histories     UserHistory[]
   software      UserSoftware[]
 
 
  @@schema("public")
  SharedAccountUser SharedAccountUser[]
 // Location Location?       @relation(fields: [locationId], references: [id]) // Optional relation to Location
  
  Location Location?       @relation(fields: [locationId], references: [id]) // Optional relation to Location
  Service Service[]
  departmentId     String?        @db.Uuid
  Department       Department?    @relation("DepartmentUsers", fields: [departmentId], references: [id], onDelete: Cascade)

 
  headedDepartments Department[] @relation("HeadedDepartments")
  Key Key[]
  KeyCard KeyCard[]
}

model UserHistory {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  action    String
  field     String
  newValue  String?
  oldValue  String?
  updatedById String @db.Uuid
  updatedBy  UserProfiles @relation(fields: [updatedById], references: [id], onDelete: Cascade)
  updatedOn DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@schema("public")
}

model Software {
  id                   String            @id @default(uuid()) @db.Uuid
  name                 String            @unique
  description          String?
  category             String?
  status               String?           @default("ACTIVE")
  createdAt            DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime          @updatedAt @db.Timestamptz(6)
  userCount            Int?
  notes                String?
  notesLastUpdatedById String?           @db.Uuid
  accountRep           String?
  amount               Float?
  currency             String?
  licenseType          String?
  paymentDueDate       DateTime?
  paymentFrequency     PaymentFrequency  @default(MONTHLY)
  paymentMethod        PaymentMethod     @default(CREDIT_CARD)
  pricePerUser         Float?
  updatedById          String?           @db.Uuid 
  website              String?
  iconUrl              String?
  assignedToId          String?           @db.Uuid
  accountReps          AccountRep[]
  // Relation to the auth user who last updated the notes:
  notesLastUpdatedBy   UserProfiles? @relation("NotesLastUpdatedBy", fields: [notesLastUpdatedById], references: [id])
  // Relation to the auth user who last updated the software:
  updatedBy    UserProfiles? @relation("SoftwareUpdateRelation", fields: [updatedById], references: [id])
  
  SoftwareAccess       SoftwareAccess[]
  histories            SoftwareHistory[] @relation("SoftwareHistory")
  UserSoftware         UserSoftware[]
  // Relation for assigned auth users (the ones designated as primary contact points):
  Assigned             UserProfiles?    @relation("AuthUserToSoftware", fields: [assignedToId], references: [id])

  @@schema("public")
  SoftwareHistory SoftwareHistory[]
  SharedAccountSoftware SharedAccountSoftware[]
}

model UserSoftware {
  id          String       @id @default(uuid()) @db.Uuid
  userId      String       @db.Uuid
  softwareId  String       @db.Uuid
  grantedById String       @db.Uuid
  accessLevel String
  role        String
  assignedAt  DateTime     @default(now()) @db.Timestamptz(6)
  grantedBy   UserProfiles @relation("GrantedAccess", fields: [grantedById], references: [id])
  software    Software     @relation(fields: [softwareId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@unique([userId, softwareId])
  @@schema("public")
}


model SoftwareAccess {
  id              String        @id @default(uuid()) @db.Uuid
  sharedAccountId String        @db.Uuid
  softwareId      String        @db.Uuid
  access          Boolean
  lastEdited      DateTime      @default(now()) @db.Timestamptz(6)
  lastEditedBy    String        @db.Uuid
  permissions     String[]
  accessLevel     String
  role            String
  uid             String
  grantedById     String         @db.Uuid
  software        Software      @relation(fields: [softwareId], references: [id])
  sharedAccount   SharedAccount @relation(fields: [sharedAccountId], references: [id], onDelete: Cascade)
  
  @@schema("public")
}


model SoftwareHistory {
  id         String   @id @default(uuid()) @db.Uuid
  softwareId String   @db.Uuid
  action     String
  field      String
  newValue   String?
  oldValue   String?
  updatedBy  String
  updatedOn  DateTime @default(now()) @db.Timestamptz(6)
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)

  @@index([softwareId])
  @@schema("public")
  Software Software[] @relation("SoftwareHistory")
}

model AccountRep {
  id         String   @id @default(uuid()) @db.Uuid
  softwareId String   @db.Uuid
  email      String
  name       String
  phone      String
  software   Software @relation(fields: [softwareId], references: [id])

  @@schema("public")
}
model SharedAccount {
  id               String                  @id @default(uuid()) @db.Uuid
  email            String                  @unique
  name             String
  normalizedName   String
  location         String?
  type             String?
  createdAt        DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                @updatedAt
  updatedById      String                  @db.Uuid
  userCount        Int                     @default(0)
  status           String                  @default("Active")
  
  // Relations without onDelete here
  updatedBy          UserProfiles?            @relation("SharedAccountUpdate", fields: [updatedById], references: [id])
  histories        SharedAccountHistory[]
  assignmentsSoftware SharedAccountSoftware[]
  assignmentsUser     SharedAccountUser[]
  SoftwareAccess SoftwareAccess[]

  @@schema("public")
}

model SharedAccountHistory {
  id              String         @id @default(uuid()) @db.Uuid
  sharedAccountId String         @db.Uuid
  action          String
  field           String
  newValue        String?
  oldValue        String?
  updatedById     String        @db.Uuid
  updatedOn       DateTime       @default(now()) @db.Timestamptz(6)
  
  sharedAccount   SharedAccount  @relation(fields: [sharedAccountId], references: [id], onDelete: Cascade)
  updatedBy       UserProfiles   @relation(fields: [updatedById], references: [id])
  @@index([sharedAccountId])
  @@schema("public")
}

model SharedAccountSoftware {
  id              String        @id @default(uuid()) @db.Uuid
  sharedAccountId String        @db.Uuid
  softwareId      String        @db.Uuid
  createdById     String        @db.Uuid
  assignedAt      DateTime      @default(now()) @db.Timestamptz(6)
  accessLevel     String
  role            String

  sharedAccount   SharedAccount @relation(fields: [sharedAccountId], references: [id])
  software        Software      @relation(fields: [softwareId], references: [id])
  createdBy       UserProfiles  @relation(fields: [createdById], references: [id])

  @@unique([sharedAccountId, softwareId])
  @@schema("public")
}
model SharedAccountUser {
  id              String        @id @default(uuid()) @db.Uuid
  sharedAccountId String        @db.Uuid
  userId          String        @db.Uuid
  createdById     String        @db.Uuid
  assignedAt      DateTime      @default(now()) @db.Timestamptz(6)


  sharedAccount   SharedAccount @relation(fields: [sharedAccountId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  createdBy       UserProfiles  @relation(fields: [createdById], references: [id])

  @@unique([sharedAccountId, userId])
  @@schema("public")
}
model Service {
  id String @id @default(uuid()) @db.Uuid
  name String
  description String
  contactID String @db.Uuid
  contact User @relation(fields: [contactID], references: [id])
  locationId String @db.Uuid
  location Location @relation(fields: [locationId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  status String @default("active")
  @@schema("public")
}

model Department {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)
  color         String?
  
  // One-to-one relationship: Department head 
  departmentHeadId String?   @db.Uuid
  departmentHead   User?   @relation("HeadedDepartments", fields: [departmentHeadId], references: [id])

  users            User[]    @relation("DepartmentUsers")

  @@schema("public")
}


model Location {
  id            String             @id @default(uuid()) @db.Uuid
  type          String
  name          String
  address       String
  city          String
  state         String
  postalCode    String
  country       String
  latitude      Float?
  longitude     Float?

  // business-hours: one entry per weekday
  operatingHours OperatingHour[]

  // all the doors in this location
  doors         Door[]

  // the employees assigned here
  employees     User[]        

  @@schema("public")
  
  Service Service[]
  Key Key[]
  keyCards KeyCardLocation[]
}
model OperatingHour {
  id          String      @id @default(uuid()) @db.Uuid
  location    Location    @relation(fields: [locationId], references: [id])
  locationId  String      @db.Uuid
  dayOfWeek   DayOfWeek
  openTime    DateTime    // use Time if supported, otherwise DateTime with same date
  closeTime   DateTime

  @@unique([locationId, dayOfWeek]) // one entry per day
  @@schema("public")
}
model Door {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  floor       String
  type        String
  location    Location    @relation(fields: [locationId], references: [id])
  locationId  String      @db.Uuid
  status      String?
  accessLevel String? 

  @@schema("public")
  Key Key[]
  
  KeyCardDoor KeyCardDoor[]
}


//physical key / key fob
//need to be tied to a door and a user
model Key {
  id String @id @default(uuid()) @db.Uuid
  name String
  description String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  type String
  doorId String? @db.Uuid
  door Door? @relation(fields: [doorId], references: [id])
  userId String? @db.Uuid
  user User? @relation(fields: [userId], references: [id])
  locationId String? @db.Uuid
  location Location? @relation(fields: [locationId], references: [id])
  @@schema("public")
}
model KeyCard{
  id String @id @default(uuid()) @db.Uuid
  name String
  description String? 
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  type String
  doors KeyCardDoor[]
  userId String? @db.Uuid
  user User? @relation(fields: [userId], references: [id])
  // multiple locations can have the same keycard
  locations KeyCardLocation[]
  @@schema("public")
}
model KeyCardDoor {
  id String @id @default(uuid()) @db.Uuid
  keyCardId String @db.Uuid
  doorId String @db.Uuid
  door Door @relation(fields: [doorId], references: [id])
  keyCard KeyCard @relation(fields: [keyCardId], references: [id])
  @@schema("public")
}
model KeyCardLocation {
  id String @id @default(uuid()) @db.Uuid
  keyCardId String @db.Uuid
  locationId String @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  
  // Relations
  keyCard KeyCard @relation(fields: [keyCardId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  
  // Unique constraint to prevent duplicate associations
  @@unique([keyCardId, locationId])
  @@schema("public")
}





enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@schema("public")
}

enum PaymentFrequency {
  WEEKLY
  BIWEEKLY
  SEMIMONTHLY
  MONTHLY
  QUARTERLY
  ANNUALLY

  @@schema("public")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH
  CHECK
  OTHER

  @@schema("public")
}



//end of public



/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model buckets {
  id                         String                       @id
  name                       String                       @unique(map: "bname")
  owner                      String?                      @db.Uuid
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  public                     Boolean?                     @default(false)
  avif_autodetection         Boolean?                     @default(false)
  file_size_limit            BigInt?
  allowed_mime_types         String[]
  owner_id                   String?
  objects                    objects[]
  s3_multipart_uploads       s3_multipart_uploads[]
  s3_multipart_uploads_parts s3_multipart_uploads_parts[]

  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model migrations {
  id          Int       @id
  name        String    @unique @db.VarChar(100)
  hash        String    @db.VarChar(40)
  executed_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("storage")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model objects {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bucket_id        String?
  name             String?
  owner            String?   @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  last_accessed_at DateTime? @default(now()) @db.Timestamptz(6)
  metadata         Json?
  path_tokens      String[]  @default(dbgenerated("string_to_array(name, '/'::text)"))
  version          String?
  owner_id         String?
  user_metadata    Json?
  buckets          buckets?  @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_bucketId_fkey")

  @@unique([bucket_id, name], map: "bucketid_objname")
  @@index([bucket_id, name], map: "idx_objects_bucket_id_name")
  @@index([name], map: "name_prefix_search")
  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model s3_multipart_uploads {
  id                         String                       @id
  in_progress_size           BigInt                       @default(0)
  upload_signature           String
  bucket_id                  String
  key                        String
  version                    String
  owner_id                   String?
  created_at                 DateTime                     @default(now()) @db.Timestamptz(6)
  user_metadata              Json?
  buckets                    buckets                      @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  s3_multipart_uploads_parts s3_multipart_uploads_parts[]

  @@index([bucket_id, key, created_at], map: "idx_multipart_uploads_list")
  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model s3_multipart_uploads_parts {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  upload_id            String
  size                 BigInt               @default(0)
  part_number          Int
  bucket_id            String
  key                  String
  etag                 String
  owner_id             String?
  version              String
  created_at           DateTime             @default(now()) @db.Timestamptz(6)
  buckets              buckets              @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  s3_multipart_uploads s3_multipart_uploads @relation(fields: [upload_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("storage")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
