// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output = "../generated/prisma"
// }

generator client {
    provider = "prisma-client-js"
    output = "../node_modules/.prisma/client"
}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  department     String    @default("unassigned")
  status         String    @default("active")
  email          String    @unique
  name           String    @unique
  jobTitle       String?
  location       String?
  personalEmail  String?   @unique
  reportsToId    String?
  type           String?

  reportsTo      User?     @relation("ManagerSubordinates", fields: [reportsToId], references: [id], onDelete: Cascade)
  subordinates   User[]    @relation("ManagerSubordinates")

  softwareNotes  Software[] @relation("NotesLastUpdatedBy")

  // For reverse lookups, like softwareUser relations if you add a join table

  

  software       UserSoftware[]  // list of software they're assigned to
  grantedAccess  UserSoftware[]  @relation("GrantedAccess") 
}

model Software {
  id                    String   @id @default(uuid())
  name                  String
  description           String?
  category              String?
  status               String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  updatedBy             String?
  userCount             Int?
  notes                 String?
  notesLastUpdatedById  String

  notesLastUpdatedBy    User     @relation("NotesLastUpdatedBy", fields: [notesLastUpdatedById], references: [id])

  UserSoftware UserSoftware[]
}


model UserSoftware {
  id           String   @id @default(uuid())
  userId       String
  softwareId   String
  grantedById  String
  accessLevel  String   // you could turn this into an enum if the values are predictable
  role         String
  assignedAt   DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  software     Software @relation(fields: [softwareId], references: [id])
  grantedBy    User     @relation("GrantedAccess", fields: [grantedById], references: [id])

  @@unique([userId, softwareId]) // still important
}
